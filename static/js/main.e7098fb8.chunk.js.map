{"version":3,"sources":["components/Header.js","components/Search.js","components/Table.js","components/DropDownButtons.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Search","props","onChange","empSearch","type","placeholder","Table","src","children","picture","name","gender","email","country","DropDownButtons","genSearch","onClick","value","text","App","employeeArray","useEffect","getEmp","axios","get","then","res","data","results","forEach","selectEmp","push","first","last","thumbnail","location","setEmp","catch","err","console","log","useState","search","setSearch","employee","simEmp","filter","emp","length","includes","e","target","empGender","startsWith","window","reload","scope","map","id","key","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e7098fb8.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"jumbotron text-center text-light bg-primary\">\r\n             <h1>Employee Directory</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nconst Search = (props) => {\r\n    return (\r\n        \r\n            <div className=\"container\">\r\n                <h5 className=\"text\">Employee Search</h5>\r\n                <form>\r\n                    <div className=\"input-group\">\r\n                        <input\r\n                            onChange={props.empSearch}\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Enter Employee Name\" />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            \r\n    )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react'\r\n\r\nconst Table = (props) => {\r\n    return (\r\n\r\n         <tr>\r\n            <td>\r\n                <img src={props.children.picture}></img>\r\n            </td>\r\n            <td>{props.children.name}</td>\r\n            <td>{props.children.gender}</td>\r\n            <td>{props.children.email}</td>\r\n            <td>{props.children.country}</td>\r\n        </tr >\r\n    \r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React from 'react'\r\nimport { BrowserRouter as Link } from \"react-router-dom\";\r\n\r\n\r\nfunction DropDownButtons(props) {\r\n    return (\r\n        \r\n        <button onChange={props.genSearch} onClick={props.genSearch} value={props.text} className=\"btn btn-success mr-2\">{props.text}</button>\r\n    )\r\n}\r\n\r\nexport default DropDownButtons\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Search from \"./components/Search\";\nimport Table from \"./components/Table\";\nimport DropDownButtons from \"./components/DropDownButtons\";\nimport axios from \"axios\";\n\nfunction App() { \n  \n  let employeeArray = [];\n\n  useEffect(() => {\n    getEmp();\n  }, [])\n\n //api request using axios\n\n  const getEmp = () => {\n\n    axios.get(\"https://randomuser.me/api/?results=10&nat=us\")\n      .then((res) => {\n        let employees = res.data.results\n        employees.forEach((selectEmp) => {\n\n          employeeArray.push({\n            name: selectEmp.name.first + \" \" + selectEmp.name.last,\n            gender: selectEmp.gender,\n            email: selectEmp.email,\n            picture: selectEmp.picture.thumbnail,\n            country:selectEmp.location.country\n          })\n        })\n        setEmp([...employeeArray])\n      })\n      .catch((err) => console.log(err))\n  }\n\n  const [search, setSearch] = useState({\n    name: \"\",\n  });\n\n  const empSearch = (e) => {\n    setSearch({ ...search, name: e.target.value });\n  };\n\n  const [gendersearch, setGenderSearch] = useState({\n    gender: \"\",\n  });\n\n  const genSearch = (e) => {\n    \n    setGenderSearch({ ...gendersearch, gender: e.target.value });    \n  };\n\n  //state definition for employee\n  const [employee, setEmp] = useState(employeeArray)\n\n  const simEmp = employee.filter(function (emp) {\n    if (search.name.length < 0) {\n      return employee\n    } else if (emp.name.includes(search.name)) {\n      return emp\n    }\n  });\n\n  // const empGender= employee.filter(function (emp) {\n  //   if (gendersearch.gender.length < 0) {\n      \n  //     return employee\n  //   } else if (emp.gender.startsWith(gendersearch.gender)){\n  //     console.log(emp.gender+gendersearch.gender);\n  //     return emp\n  //   } \n  // });\n  \n  return (\n    <div className=\"App\">\n     <Header/>\n     <Search empSearch={empSearch}/>\n     <div className=\"container\">\n     <h5 className=\"text\">Filter By Gender</h5>\n     <div className=\"FilterOptions\">\n    \n     <DropDownButtons text=\"male\" value=\"male\" genSearch={() => {\n                                                 const empGender = employee.filter(function (emp) {\n                                                   if (emp.gender.startsWith('male')){\n                                                     return emp\n                                                   }\n                                                });\n                                                 setEmp([...empGender])\n                                                }}/>\n     <DropDownButtons text=\"female\" value=\"female\" genSearch={() => {\n                                                 const empGender = employee.filter(function (emp) {\n                                                   if (emp.gender.startsWith('female')){\n                                                     return emp\n                                                   }\n                                                });\n                                                 setEmp([...empGender])\n                                                }}/>\n     <DropDownButtons text=\"Refresh\" value=\"\" genSearch={() => window.location.reload(false)} />\n     </div>\n     </div>\n\n     <table className=\"table mx-auto\">\n        <thead className=\"thead-light\">\n          <tr>\n            <th scope=\"col\"></th>\n            <th scope=\"col\">Name</th>\n            <th scope=\"col\">Gender</th>\n            <th scope=\"col\">Email</th>\n            <th scope=\"col\">Country</th>\n          </tr>\n        </thead>\n        <tbody >\n\n          {simEmp.map((employee, id) => (\n            <Table key={id}>\n              {employee}\n            </Table>\n          ))}\n\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}